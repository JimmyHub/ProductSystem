"""
Django settings for Store project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'e7g-0mn6bk(t*493e&r!^0oq8s9a+&6kxfd2$y4dfg0r53vcpq'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'product', 'rest_framework', 'drf_yasg',
]
# DATABASE_ROUTERS = ['database_routers.testdb.TestRouter']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Store.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [Path('/').joinpath(BASE_DIR, 'templates/')],
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Store.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'psystem_in',
        'USER': 'root',
        'PASSWORD': 'jimmy41708',
        'HOST': '127.0.0.1',
        'PORT': 3306,
    },
    'out': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'psystem_out',
        'USER': 'root',
        'PASSWORD': 'jimmy41708',
        'HOST': '127.0.0.1',
        'PORT': 3306,
    }

}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hant'

TIME_ZONE = 'Asia/Taipei'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
STATIC_URL = '/static/'

CORS_ORIGIN_ALLOW_ALL = False
# CORS_ORIGIN_ALLOW_ALL=True

# 表示在跨域請求中 允許對瀏覽器cookie進行操作
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1:8080',
    'http://localhost:8080'
)
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)

CORS_ALLOW_HEADERS = (
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)
# 結尾是否自動補上/
APPEND_SLASH = False
MEDIA_URL = '/media/'

# 媒體資源存放的 服務器目錄
MEDIA_ROOT = Path('/').joinpath(BASE_DIR, 'media/')

# # https://github.com/pennersr/django-allauth
# ACCOUNT_EMAIL_VERIFICATION = 'none'
# # set UI url to redirect after a successful e-mail confirmation
# # changed from '/auth/login' to '/auth/email-confirmation' for email confirmation message
# DATA_ROOT = os.path.join(BASE_DIR, 'data')
# LOGSTASH_DB = os.path.join(DATA_ROOT, 'logstash.db')
# os.makedirs(DATA_ROOT, exist_ok=True)
# if not os.path.exists(LOGSTASH_DB):
#     open(LOGSTASH_DB, 'w').close()
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'logstash': {
#             '()': 'logstash_async.formatter.DjangoLogstashFormatter',
#             'message_type': 'python-logstash',
#             'fqdn': False,  # Fully qualified domain name. Default value: false.
#         },
#         'standard': {
#             'format': '[%(asctime)s] %(levelname)s %(name)s: %(message)s'
#         }
#     },
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#             'filters': [],
#             'formatter': 'standard',
#         },
#         'server_file': {
#             'class': 'logging.handlers.RotatingFileHandler',
#             'level': 'DEBUG',
#             'filename': os.path.join(BASE_DIR, 'logs', 'cvat_server.log'),
#             'formatter': 'standard',
#             'maxBytes': 1024 * 1024 * 50,  # 50 MB
#             'backupCount': 5,
#         },
#         'logstash': {
#             'level': 'INFO',
#             'class': 'logstash_async.handler.AsynchronousLogstashHandler',
#             'formatter': 'logstash',
#             'transport': 'logstash_async.transport.HttpTransport',
#             'ssl_enable': False,
#             'ssl_verify': False,
#             'host': os.getenv('DJANGO_LOG_SERVER_HOST', 'localhost'),
#             'port': os.getenv('DJANGO_LOG_SERVER_PORT', 8080),
#             'version': 1,
#             'message_type': 'django',
#             'database_path': LOGSTASH_DB,
#         }
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'server_file'],
#             'level': 'INFO',
#             'propagate': True
#         }
#     },
# }
